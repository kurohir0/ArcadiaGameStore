package Main;

import java.sql.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;

/**
 * @author Hiro *
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BodyPanel = new javax.swing.JPanel();
        MenuPanel = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        labelGenre = new javax.swing.JLabel();
        labelCart = new javax.swing.JLabel();
        labelLibrary = new javax.swing.JLabel();
        labelSettings = new javax.swing.JLabel();
        labelLogout = new javax.swing.JLabel();
        bgMenu = new javax.swing.JLabel();
        MainPanel = new javax.swing.JPanel();
        Genre = new javax.swing.JPanel();
        genreTitle = new javax.swing.JLabel();
        actionLabel = new javax.swing.JLabel();
        advLabel = new javax.swing.JLabel();
        shotLabel = new javax.swing.JLabel();
        simuLabel = new javax.swing.JLabel();
        sportLabel = new javax.swing.JLabel();
        racingLabel = new javax.swing.JLabel();
        horrorLabel = new javax.swing.JLabel();
        stratLabel = new javax.swing.JLabel();
        genrePanel = new javax.swing.JLabel();
        bgGenre = new javax.swing.JLabel();
        actionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        actionTable = new javax.swing.JTable();
        actBtn = new javax.swing.JLabel();
        bgAction = new javax.swing.JLabel();
        adventurePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        adventureTable = new javax.swing.JTable();
        advBtn = new javax.swing.JLabel();
        bgAdventure = new javax.swing.JLabel();
        shotPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        shootingTable = new javax.swing.JTable();
        shotBtn = new javax.swing.JLabel();
        bgShooting = new javax.swing.JLabel();
        simuPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        simulationTable = new javax.swing.JTable();
        simuBtn = new javax.swing.JLabel();
        bgSimulation = new javax.swing.JLabel();
        sportPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        sportTable = new javax.swing.JTable();
        sportBtn = new javax.swing.JLabel();
        bgSport = new javax.swing.JLabel();
        racingPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        racingTable = new javax.swing.JTable();
        racingBtn = new javax.swing.JLabel();
        bgRacing = new javax.swing.JLabel();
        horrorPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        horrorTable = new javax.swing.JTable();
        horrorBtn = new javax.swing.JLabel();
        bgHorror = new javax.swing.JLabel();
        StrategyPanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        strategyTable = new javax.swing.JTable();
        startBtn = new javax.swing.JLabel();
        bgStrategy = new javax.swing.JLabel();
        Cart = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        cartBtn = new javax.swing.JLabel();
        bgCart = new javax.swing.JLabel();
        Library = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        libraryTable = new javax.swing.JTable();
        bgOrder1 = new javax.swing.JLabel();
        Order = new javax.swing.JPanel();
        totalLabel1 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        tfTotal = new javax.swing.JTextField();
        purchaseBtn = new javax.swing.JLabel();
        continueBtn = new javax.swing.JLabel();
        saldoLabel = new javax.swing.JLabel();
        tfBalance = new javax.swing.JTextField();
        changeLabel = new javax.swing.JLabel();
        tfChange = new javax.swing.JTextField();
        bgOrder = new javax.swing.JLabel();
        Settings = new javax.swing.JPanel();
        lbUsername = new javax.swing.JLabel();
        tfUsername = new javax.swing.JTextField();
        lbPassword = new javax.swing.JLabel();
        lbSaldo = new javax.swing.JLabel();
        tfSaldo = new javax.swing.JTextField();
        pfPassword = new javax.swing.JPasswordField();
        settingsBtn = new javax.swing.JLabel();
        cancelBtn = new javax.swing.JLabel();
        bgSettings = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arcadia Game Store");
        setName("jframe1"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 675));

        BodyPanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        BodyPanel.setPreferredSize(new java.awt.Dimension(1200, 675));

        MenuPanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        MenuPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        MenuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/Logo 2.png"))); // NOI18N
        logo.setLabelFor(MenuPanel);
        MenuPanel.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 300, 80));

        labelGenre.setBackground(new java.awt.Color(0, 0, 0, 0));
        labelGenre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Genre.png"))); // NOI18N
        labelGenre.setLabelFor(MenuPanel);
        labelGenre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelGenreMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelGenreMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelGenreMouseExited(evt);
            }
        });
        MenuPanel.add(labelGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 175, 228, 59));

        labelCart.setBackground(new java.awt.Color(0, 0, 0, 0));
        labelCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Cart.png"))); // NOI18N
        labelCart.setLabelFor(MenuPanel);
        labelCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCartMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelCartMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelCartMouseExited(evt);
            }
        });
        MenuPanel.add(labelCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 258, 228, 58));

        labelLibrary.setBackground(new java.awt.Color(0, 0, 0, 0));
        labelLibrary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Library.png"))); // NOI18N
        labelLibrary.setLabelFor(MenuPanel);
        labelLibrary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelLibraryMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelLibraryMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelLibraryMouseExited(evt);
            }
        });
        MenuPanel.add(labelLibrary, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 342, 228, 59));

        labelSettings.setBackground(new java.awt.Color(0, 0, 0, 0));
        labelSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Settings.png"))); // NOI18N
        labelSettings.setLabelFor(MenuPanel);
        labelSettings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelSettingsMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelSettingsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelSettingsMouseExited(evt);
            }
        });
        MenuPanel.add(labelSettings, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 425, 228, 59));

        labelLogout.setBackground(new java.awt.Color(0, 0, 0, 0));
        labelLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Logout.png"))); // NOI18N
        labelLogout.setLabelFor(MenuPanel);
        labelLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelLogoutMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelLogoutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelLogoutMouseExited(evt);
            }
        });
        MenuPanel.add(labelLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 509, 228, 59));

        bgMenu.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Left.png"))); // NOI18N
        bgMenu.setLabelFor(MenuPanel);
        MenuPanel.add(bgMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 675));

        MainPanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        MainPanel.setAlignmentX(0.0F);
        MainPanel.setAlignmentY(0.0F);
        MainPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        MainPanel.setLayout(new java.awt.CardLayout());

        Genre.setBackground(new java.awt.Color(0, 0, 0, 0));
        Genre.setAlignmentX(0.0F);
        Genre.setAlignmentY(0.0F);
        Genre.setPreferredSize(new java.awt.Dimension(660, 675));
        Genre.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        genreTitle.setBackground(new java.awt.Color(0, 0, 0, 0));
        genreTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/Pilih Genre.png"))); // NOI18N
        Genre.add(genreTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 367, 41));

        actionLabel.setBackground(new java.awt.Color(0, 0, 0, 0));
        actionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Action.png"))); // NOI18N
        actionLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actionLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                actionLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                actionLabelMouseExited(evt);
            }
        });
        Genre.add(actionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 192, 248, 64));

        advLabel.setBackground(new java.awt.Color(0, 0, 0, 0));
        advLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Adventure.png"))); // NOI18N
        advLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                advLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                advLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                advLabelMouseExited(evt);
            }
        });
        Genre.add(advLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(324, 192, 248, 63));

        shotLabel.setBackground(new java.awt.Color(0, 0, 0, 0));
        shotLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Shooting.png"))); // NOI18N
        shotLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shotLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                shotLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                shotLabelMouseExited(evt);
            }
        });
        Genre.add(shotLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 283, 248, 64));

        simuLabel.setBackground(new java.awt.Color(0, 0, 0, 0));
        simuLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Simulation.png"))); // NOI18N
        simuLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                simuLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                simuLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                simuLabelMouseExited(evt);
            }
        });
        Genre.add(simuLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(324, 283, 248, 64));

        sportLabel.setBackground(new java.awt.Color(0, 0, 0, 0));
        sportLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Sport.png"))); // NOI18N
        sportLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sportLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                sportLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                sportLabelMouseExited(evt);
            }
        });
        Genre.add(sportLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 374, 248, 64));

        racingLabel.setBackground(new java.awt.Color(0, 0, 0, 0));
        racingLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Racing.png"))); // NOI18N
        racingLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                racingLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                racingLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                racingLabelMouseExited(evt);
            }
        });
        Genre.add(racingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(324, 374, 248, 64));

        horrorLabel.setBackground(new java.awt.Color(0, 0, 0, 0));
        horrorLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Horror.png"))); // NOI18N
        horrorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                horrorLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                horrorLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                horrorLabelMouseExited(evt);
            }
        });
        Genre.add(horrorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 465, 248, 64));

        stratLabel.setBackground(new java.awt.Color(0, 0, 0, 0));
        stratLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Strategy.png"))); // NOI18N
        stratLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stratLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                stratLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                stratLabelMouseExited(evt);
            }
        });
        Genre.add(stratLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(324, 465, 248, 64));

        genrePanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        genrePanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/Genre Panel.png"))); // NOI18N
        Genre.add(genrePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 165, 586, 393));

        bgGenre.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgGenre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        Genre.add(bgGenre, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(Genre, "cardGenre");

        actionPanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        actionPanel.setAlignmentX(0.0F);
        actionPanel.setAlignmentY(0.0F);
        actionPanel.setPreferredSize(new java.awt.Dimension(660, 675));
        actionPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        actionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Gambar", "Title", "Genre", "Harga", "Platform", "Deskripsi", "Developer/Publisher"
            }
        ));
        actionTable.setRowHeight(50);
        jScrollPane1.setViewportView(actionTable);

        actionPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 400));

        actBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png"))); // NOI18N
        actBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                actBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                actBtnMouseExited(evt);
            }
        });
        actionPanel.add(actBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 550, -1, -1));

        bgAction.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgAction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        actionPanel.add(bgAction, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(actionPanel, "cardAction");

        adventurePanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        adventurePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setMinimumSize(new java.awt.Dimension(21, 22));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(450, 400));

        adventureTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Gambar", "Title", "Genre", "Harga", "Platform", "Deskripsi", "Developer"
            }
        ));
        adventureTable.setRowHeight(50);
        jScrollPane2.setViewportView(adventureTable);

        adventurePanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 400));

        advBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png"))); // NOI18N
        advBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                advBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                advBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                advBtnMouseExited(evt);
            }
        });
        adventurePanel.add(advBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 550, -1, -1));

        bgAdventure.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgAdventure.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        adventurePanel.add(bgAdventure, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(adventurePanel, "cardAdventure");

        shotPanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        shotPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane3.setBorder(null);

        shootingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Gambar", "Title", "Genre", "Harga", "Platform", "Deskripsi", "Developer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        shootingTable.setRowHeight(50);
        jScrollPane3.setViewportView(shootingTable);

        shotPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 400));

        shotBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png"))); // NOI18N
        shotBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shotBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                shotBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                shotBtnMouseExited(evt);
            }
        });
        shotPanel.add(shotBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 550, -1, -1));

        bgShooting.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgShooting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        shotPanel.add(bgShooting, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(shotPanel, "cardShooting");

        simuPanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        simuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        simulationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Gambar", "Title", "Genre", "Harga", "Platform", "Deskripsi", "Developer"
            }
        ));
        simulationTable.setRowHeight(50);
        jScrollPane4.setViewportView(simulationTable);

        simuPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 400));

        simuBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png"))); // NOI18N
        simuBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                simuBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                simuBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                simuBtnMouseExited(evt);
            }
        });
        simuPanel.add(simuBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 550, -1, -1));

        bgSimulation.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgSimulation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        simuPanel.add(bgSimulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(simuPanel, "cardSimulation");

        sportPanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        sportPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Gambar", "Title", "Genre", "Harga", "Platform", "Deskripsi", "Developer"
            }
        ));
        sportTable.setRowHeight(50);
        jScrollPane5.setViewportView(sportTable);

        sportPanel.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 400));

        sportBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png"))); // NOI18N
        sportBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sportBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                sportBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                sportBtnMouseExited(evt);
            }
        });
        sportPanel.add(sportBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 550, -1, -1));

        bgSport.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgSport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        sportPanel.add(bgSport, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(sportPanel, "cardSport");

        racingPanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        racingPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        racingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Gambar", "Title", "Genre", "Harga", "Platform", "Deskripsi", "Developer"
            }
        ));
        racingTable.setRowHeight(50);
        jScrollPane6.setViewportView(racingTable);

        racingPanel.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 400));

        racingBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png"))); // NOI18N
        racingBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                racingBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                racingBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                racingBtnMouseExited(evt);
            }
        });
        racingPanel.add(racingBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 550, -1, -1));

        bgRacing.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgRacing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        racingPanel.add(bgRacing, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(racingPanel, "cardRacing");

        horrorPanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        horrorPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        horrorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Gambar", "Title", "Genre", "Harga", "Platform", "Deskripsi", "Developer"
            }
        ));
        horrorTable.setRowHeight(50);
        jScrollPane7.setViewportView(horrorTable);

        horrorPanel.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 400));

        horrorBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png"))); // NOI18N
        horrorBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                horrorBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                horrorBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                horrorBtnMouseExited(evt);
            }
        });
        horrorPanel.add(horrorBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 550, -1, -1));

        bgHorror.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgHorror.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        horrorPanel.add(bgHorror, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(horrorPanel, "cardHorror");

        StrategyPanel.setBackground(new java.awt.Color(0, 0, 0, 0));
        StrategyPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        strategyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Gambar", "Title", "Genre", "Harga", "Platform", "Deskripsi", "Developer"
            }
        ));
        strategyTable.setRowHeight(50);
        jScrollPane8.setViewportView(strategyTable);

        StrategyPanel.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 400));

        startBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png"))); // NOI18N
        startBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                startBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                startBtnMouseExited(evt);
            }
        });
        StrategyPanel.add(startBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 550, -1, -1));

        bgStrategy.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgStrategy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        StrategyPanel.add(bgStrategy, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(StrategyPanel, "cardStrategy");

        Cart.setBackground(new java.awt.Color(0, 0, 0, 0));
        Cart.setAlignmentX(0.0F);
        Cart.setAlignmentY(0.0F);
        Cart.setPreferredSize(new java.awt.Dimension(660, 675));
        Cart.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Cart", "ID Produk", "Gambar", "Title", "Harga"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cartTable.setRowHeight(50);
        jScrollPane9.setViewportView(cartTable);

        Cart.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 420));

        cartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Checkout.png"))); // NOI18N
        cartBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cartBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cartBtnMouseExited(evt);
            }
        });
        Cart.add(cartBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 570, -1, -1));

        bgCart.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        Cart.add(bgCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(Cart, "cardCart");

        Library.setBackground(new java.awt.Color(0, 0, 0, 0));
        Library.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        libraryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gambar", "Title", "Deskripsi"
            }
        ));
        libraryTable.setRowHeight(50);
        jScrollPane11.setViewportView(libraryTable);

        Library.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 460));

        bgOrder1.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgOrder1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        Library.add(bgOrder1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(Library, "cardLibrary");

        Order.setBackground(new java.awt.Color(0, 0, 0, 0));
        Order.setAlignmentX(0.0F);
        Order.setAlignmentY(0.0F);
        Order.setPreferredSize(new java.awt.Dimension(660, 675));
        Order.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        totalLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalLabel1.setForeground(new java.awt.Color(255, 255, 255));
        totalLabel1.setText("Total");
        Order.add(totalLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, -1, 30));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Total"
            }
        ));
        jScrollPane10.setViewportView(orderTable);

        Order.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 620, 260));

        tfTotal.setEditable(false);
        Order.add(tfTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 420, 200, 30));

        purchaseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Purchase.png"))); // NOI18N
        purchaseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                purchaseBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                purchaseBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                purchaseBtnMouseExited(evt);
            }
        });
        Order.add(purchaseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 490, -1, -1));

        continueBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Continue.png"))); // NOI18N
        continueBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                continueBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                continueBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                continueBtnMouseExited(evt);
            }
        });
        Order.add(continueBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 430, -1, -1));

        saldoLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        saldoLabel.setForeground(new java.awt.Color(255, 255, 255));
        saldoLabel.setText("Balance");
        Order.add(saldoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, -1, 30));

        tfBalance.setEditable(false);
        Order.add(tfBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 470, 200, 30));

        changeLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        changeLabel.setForeground(new java.awt.Color(255, 255, 255));
        changeLabel.setText("Change");
        Order.add(changeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, -1, 30));

        tfChange.setEditable(false);
        Order.add(tfChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 520, 200, 30));

        bgOrder.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        Order.add(bgOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(Order, "cardOrder");

        Settings.setBackground(new java.awt.Color(0, 0, 0, 0));
        Settings.setAlignmentX(0.0F);
        Settings.setAlignmentY(0.0F);
        Settings.setPreferredSize(new java.awt.Dimension(660, 675));
        Settings.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbUsername.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbUsername.setForeground(new java.awt.Color(255, 255, 255));
        lbUsername.setText("Username");
        Settings.add(lbUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 140, 30));
        Settings.add(tfUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 460, 40));

        lbPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbPassword.setForeground(new java.awt.Color(255, 255, 255));
        lbPassword.setText("Password");
        Settings.add(lbPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, 140, 30));

        lbSaldo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbSaldo.setForeground(new java.awt.Color(255, 255, 255));
        lbSaldo.setText("Balance");
        Settings.add(lbSaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, 140, 30));

        tfSaldo.setEditable(false);
        Settings.add(tfSaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 360, 460, 40));
        Settings.add(pfPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, 460, 40));

        settingsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Save.png"))); // NOI18N
        settingsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                settingsBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                settingsBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                settingsBtnMouseExited(evt);
            }
        });
        Settings.add(settingsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 470, 260, 50));

        cancelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Cancel.png"))); // NOI18N
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancelBtnMouseExited(evt);
            }
        });
        Settings.add(cancelBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 470, 260, 50));

        bgSettings.setBackground(new java.awt.Color(0, 0, 0, 0));
        bgSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ui/BG Right.png"))); // NOI18N
        Settings.add(bgSettings, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.add(Settings, "cardSettings");

        javax.swing.GroupLayout BodyPanelLayout = new javax.swing.GroupLayout(BodyPanel);
        BodyPanel.setLayout(BodyPanelLayout);
        BodyPanelLayout.setHorizontalGroup(
            BodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BodyPanelLayout.createSequentialGroup()
                .addGap(538, 538, 538)
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(MenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        BodyPanelLayout.setVerticalGroup(
            BodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(MenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BodyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BodyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void labelGenreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelGenreMouseClicked
        labelGenre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Genre.png")));
        switchPanel(Genre);
    }//GEN-LAST:event_labelGenreMouseClicked

    private void labelGenreMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelGenreMouseEntered
        labelGenre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Genre Hover.png")));
    }//GEN-LAST:event_labelGenreMouseEntered

    private void labelGenreMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelGenreMouseExited
        labelGenre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Genre.png")));
    }//GEN-LAST:event_labelGenreMouseExited

    private void labelCartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCartMouseClicked
        labelCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Cart.png")));
        switchPanel(Cart);
        showCart();
    }//GEN-LAST:event_labelCartMouseClicked

    private void labelCartMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCartMouseEntered
        labelCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Cart Hover.png")));
    }//GEN-LAST:event_labelCartMouseEntered

    private void labelCartMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCartMouseExited
        labelCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Cart.png")));
    }//GEN-LAST:event_labelCartMouseExited

    private void labelLibraryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLibraryMouseClicked
        labelLibrary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Library.png")));
        switchPanel(Library);
        showLibrary();
    }//GEN-LAST:event_labelLibraryMouseClicked

    private void labelLibraryMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLibraryMouseEntered
        labelLibrary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Library Hover.png")));
    }//GEN-LAST:event_labelLibraryMouseEntered

    private void labelLibraryMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLibraryMouseExited
        labelLibrary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Library.png")));
    }//GEN-LAST:event_labelLibraryMouseExited

    private void labelSettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSettingsMouseClicked
        labelSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Settings.png")));
        switchPanel(Settings);
        showBalance();
    }//GEN-LAST:event_labelSettingsMouseClicked

    private void labelSettingsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSettingsMouseEntered
        labelSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Settings Hover.png")));
    }//GEN-LAST:event_labelSettingsMouseEntered

    private void labelSettingsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSettingsMouseExited
        labelSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Settings.png")));
    }//GEN-LAST:event_labelSettingsMouseExited

    private void labelLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLogoutMouseClicked
        labelLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Logout.png")));
        Main main = new Main();
        main.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_labelLogoutMouseClicked

    private void labelLogoutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLogoutMouseEntered
        labelLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Logout Hover.png")));
    }//GEN-LAST:event_labelLogoutMouseEntered

    private void labelLogoutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLogoutMouseExited
        labelLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Logout.png")));
    }//GEN-LAST:event_labelLogoutMouseExited

    private void actionLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionLabelMouseClicked
        actionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Action.png")));
        switchPanel(actionPanel);
        gantiGenre("Action", actionTable);
    }//GEN-LAST:event_actionLabelMouseClicked

    private void actionLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionLabelMouseEntered
        actionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Action Hover.png")));
    }//GEN-LAST:event_actionLabelMouseEntered

    private void actionLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionLabelMouseExited
        actionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Action.png")));
    }//GEN-LAST:event_actionLabelMouseExited

    private void advLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advLabelMouseClicked
        advLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Adventure.png")));
        switchPanel(adventurePanel);
        gantiGenre("Adventure", adventureTable);
    }//GEN-LAST:event_advLabelMouseClicked

    private void advLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advLabelMouseEntered
        advLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Adventure Hover.png")));
    }//GEN-LAST:event_advLabelMouseEntered

    private void advLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advLabelMouseExited
        advLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Adventure.png")));
    }//GEN-LAST:event_advLabelMouseExited

    private void shotLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shotLabelMouseClicked
        shotLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Shooting.png")));
        switchPanel(shotPanel);
        gantiGenre("Shooting", shootingTable);
    }//GEN-LAST:event_shotLabelMouseClicked

    private void shotLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shotLabelMouseEntered
        shotLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Shooting Hover.png")));
    }//GEN-LAST:event_shotLabelMouseEntered

    private void shotLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shotLabelMouseExited
        shotLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Shooting.png")));
    }//GEN-LAST:event_shotLabelMouseExited

    private void simuLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simuLabelMouseClicked
        simuLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Simulation.png")));
        switchPanel(simuPanel);
        gantiGenre("Simulation", simulationTable);
    }//GEN-LAST:event_simuLabelMouseClicked

    private void simuLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simuLabelMouseEntered
        simuLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Simulation Hover.png")));
    }//GEN-LAST:event_simuLabelMouseEntered

    private void simuLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simuLabelMouseExited
        simuLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Simulation.png")));
    }//GEN-LAST:event_simuLabelMouseExited

    private void sportLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sportLabelMouseClicked
        sportLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Sport.png")));
        switchPanel(sportPanel);
        gantiGenre("Sport", sportTable);
    }//GEN-LAST:event_sportLabelMouseClicked

    private void sportLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sportLabelMouseEntered
        sportLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Sport Hover.png")));
    }//GEN-LAST:event_sportLabelMouseEntered

    private void sportLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sportLabelMouseExited
        sportLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Sport.png")));
    }//GEN-LAST:event_sportLabelMouseExited

    private void racingLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_racingLabelMouseClicked
        racingLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Racing.png")));
        switchPanel(racingPanel);
        gantiGenre("Racing", racingTable);
    }//GEN-LAST:event_racingLabelMouseClicked

    private void racingLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_racingLabelMouseEntered
        racingLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Racing Hover.png")));
    }//GEN-LAST:event_racingLabelMouseEntered

    private void racingLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_racingLabelMouseExited
        racingLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Racing.png")));
    }//GEN-LAST:event_racingLabelMouseExited

    private void horrorLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horrorLabelMouseClicked
        horrorLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Horror.png")));
        switchPanel(horrorPanel);
        gantiGenre("Horror", horrorTable);
    }//GEN-LAST:event_horrorLabelMouseClicked

    private void horrorLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horrorLabelMouseEntered
        horrorLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Horror Hover.png")));
    }//GEN-LAST:event_horrorLabelMouseEntered

    private void horrorLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horrorLabelMouseExited
        horrorLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Horror.png")));
    }//GEN-LAST:event_horrorLabelMouseExited

    private void stratLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stratLabelMouseClicked
        stratLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Strategy.png")));
        switchPanel(StrategyPanel);
        gantiGenre("Strategy", strategyTable);
    }//GEN-LAST:event_stratLabelMouseClicked

    private void stratLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stratLabelMouseEntered
        stratLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Strategy Hover.png")));
    }//GEN-LAST:event_stratLabelMouseEntered

    private void stratLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stratLabelMouseExited
        stratLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Strategy.png")));
    }//GEN-LAST:event_stratLabelMouseExited

    private void shotBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shotBtnMouseClicked
        shotBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
        addToCart("Shooting", shootingTable);
    }//GEN-LAST:event_shotBtnMouseClicked

    private void shotBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shotBtnMouseEntered
        shotBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart Hover.png")));
    }//GEN-LAST:event_shotBtnMouseEntered

    private void shotBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shotBtnMouseExited
        shotBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
    }//GEN-LAST:event_shotBtnMouseExited

    private void advBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advBtnMouseClicked
        advBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
        addToCart("Adventure", adventureTable);
    }//GEN-LAST:event_advBtnMouseClicked

    private void advBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advBtnMouseEntered
        advBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart Hover.png")));
    }//GEN-LAST:event_advBtnMouseEntered

    private void advBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advBtnMouseExited
        advBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
    }//GEN-LAST:event_advBtnMouseExited

    private void actBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actBtnMouseClicked
        actBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
        addToCart("Action", actionTable);
    }//GEN-LAST:event_actBtnMouseClicked

    private void actBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actBtnMouseEntered
        actBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart Hover.png")));
    }//GEN-LAST:event_actBtnMouseEntered

    private void actBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actBtnMouseExited
        actBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
    }//GEN-LAST:event_actBtnMouseExited

    private void simuBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simuBtnMouseClicked
        simuBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
        addToCart("Simulation", simulationTable);
    }//GEN-LAST:event_simuBtnMouseClicked

    private void simuBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simuBtnMouseEntered
        simuBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart Hover.png")));
    }//GEN-LAST:event_simuBtnMouseEntered

    private void simuBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simuBtnMouseExited
        simuBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
    }//GEN-LAST:event_simuBtnMouseExited

    private void sportBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sportBtnMouseClicked
        sportBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
        addToCart("Sport", sportTable);
    }//GEN-LAST:event_sportBtnMouseClicked

    private void sportBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sportBtnMouseEntered
        sportBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart Hover.png")));
    }//GEN-LAST:event_sportBtnMouseEntered

    private void sportBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sportBtnMouseExited
        sportBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
    }//GEN-LAST:event_sportBtnMouseExited

    private void racingBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_racingBtnMouseClicked
        racingBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
        addToCart("Racing", racingTable);
    }//GEN-LAST:event_racingBtnMouseClicked

    private void racingBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_racingBtnMouseEntered
        racingBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart Hover.png")));
    }//GEN-LAST:event_racingBtnMouseEntered

    private void racingBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_racingBtnMouseExited
        racingBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
    }//GEN-LAST:event_racingBtnMouseExited

    private void horrorBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horrorBtnMouseClicked
        horrorBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
        addToCart("Horror", horrorTable);
    }//GEN-LAST:event_horrorBtnMouseClicked

    private void horrorBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horrorBtnMouseEntered
        horrorBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart Hover.png")));
    }//GEN-LAST:event_horrorBtnMouseEntered

    private void horrorBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horrorBtnMouseExited
        horrorBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
    }//GEN-LAST:event_horrorBtnMouseExited

    private void startBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseClicked
        startBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
        addToCart("Strategy", strategyTable);
    }//GEN-LAST:event_startBtnMouseClicked

    private void startBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseEntered
        startBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart Hover.png")));
    }//GEN-LAST:event_startBtnMouseEntered

    private void startBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseExited
        startBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Add to Cart.png")));
    }//GEN-LAST:event_startBtnMouseExited

    private void cartBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartBtnMouseClicked
        cartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Checkout.png")));
        moveToOrder();
        switchPanel(Order);
    }//GEN-LAST:event_cartBtnMouseClicked

    private void cartBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartBtnMouseEntered
        cartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Checkout Hover.png")));
    }//GEN-LAST:event_cartBtnMouseEntered

    private void cartBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartBtnMouseExited
        cartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Checkout.png")));
    }//GEN-LAST:event_cartBtnMouseExited

    private void purchaseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseBtnMouseClicked
        purchaseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Purchase.png")));
        moveToLibrary();
        switchPanel(Library);
    }//GEN-LAST:event_purchaseBtnMouseClicked

    private void purchaseBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseBtnMouseEntered
        purchaseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Purchase Hover.png")));
    }//GEN-LAST:event_purchaseBtnMouseEntered

    private void purchaseBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseBtnMouseExited
        purchaseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Purchase.png")));
    }//GEN-LAST:event_purchaseBtnMouseExited

    private void continueBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_continueBtnMouseClicked
        continueBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Continue.png")));
        switchPanel(Genre);
    }//GEN-LAST:event_continueBtnMouseClicked

    private void continueBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_continueBtnMouseEntered
        continueBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Continue Hover.png")));
    }//GEN-LAST:event_continueBtnMouseEntered

    private void continueBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_continueBtnMouseExited
        continueBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Continue.png")));
    }//GEN-LAST:event_continueBtnMouseExited

    private void settingsBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsBtnMouseClicked
        settingsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Save.png")));
        // Assuming you have text fields named tfUsername and pfPassword
        String newUsername = tfUsername.getText().trim();
        String newPassword = new String(pfPassword.getPassword());

        if (newUsername.isEmpty() || newPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username and password cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            // Reset the icon
            settingsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Save.png")));
        } else {
            UpdateUser(newUsername, newPassword);
            // Reset the icon after successful update
            settingsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Save.png")));
        }
    }//GEN-LAST:event_settingsBtnMouseClicked

    private void settingsBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsBtnMouseEntered
        settingsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Save Hover.png")));
    }//GEN-LAST:event_settingsBtnMouseEntered

    private void settingsBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsBtnMouseExited
        settingsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Save.png")));
    }//GEN-LAST:event_settingsBtnMouseExited

    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseClicked
        cancelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Cancel.png")));
        switchPanel(Genre);
    }//GEN-LAST:event_cancelBtnMouseClicked

    private void cancelBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseEntered
        cancelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Cancel Hover.png")));
    }//GEN-LAST:event_cancelBtnMouseEntered

    private void cancelBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseExited
        cancelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/button/Cancel.png")));
    }//GEN-LAST:event_cancelBtnMouseExited

    /**
     * @param args the command line arguments
     */
    private void moveToLibrary() {
        try {
            Connection connection = Koneksi.getConnection();

            String selectOrderQuery = "SELECT * FROM orders";
            try (PreparedStatement selectOrderStatement = connection.prepareStatement(selectOrderQuery);
                    ResultSet orderResultSet = selectOrderStatement.executeQuery()) {

                while (orderResultSet.next()) {
                    int idOrder = orderResultSet.getInt("ID_Order");
                    String namaProduk = orderResultSet.getString("nama_produk");

                    // Get the product details
                    Object[] productDetails = getProductDetails(namaProduk);
                    String deskripsi = (String) productDetails[0];
                    byte[] gambar = (byte[]) productDetails[1];

                    // Get the logged-in user's ID
                    int userId = getUserIdByUsername(UserSession.getLoggedInUsername());
                    double totalAmount = calculateTotalAmount();
                deductBalance(userId, totalAmount);
                    // Insert data into library table
                    String insertLibraryQuery = "INSERT INTO librarys (id_user, id_order, nama_produk, deskripsi, gambar) VALUES (?, ?, ?, ?, ?)";
                    try (PreparedStatement insertLibraryStatement = connection.prepareStatement(insertLibraryQuery)) {
                        insertLibraryStatement.setInt(1, userId); // Use the user ID instead of username
                        insertLibraryStatement.setInt(2, idOrder);
                        insertLibraryStatement.setString(3, namaProduk);
                        insertLibraryStatement.setString(4, deskripsi);
                        insertLibraryStatement.setBytes(5, gambar);

                        insertLibraryStatement.executeUpdate();
                    }
                }
                
                // Clear data from orders table after moving to library
                String clearOrderQuery = "DELETE FROM orders";
                try (PreparedStatement clearOrderStatement = connection.prepareStatement(clearOrderQuery)) {
                    clearOrderStatement.executeUpdate();
                }

                JOptionPane.showMessageDialog(this, "All items moved to library successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Refresh both order and library tables
                showOrder();
                showLibrary();
            }
            Koneksi.closeConnection(connection);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error moving items to library: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deductBalance(int userId, double amount) {
        try {
            Connection connection = Koneksi.getConnection();
            String updateBalanceQuery = "UPDATE user SET saldo = saldo - ? WHERE id_user = ?";

            try (PreparedStatement updateBalanceStatement = connection.prepareStatement(updateBalanceQuery)) {
                updateBalanceStatement.setDouble(1, amount);
                updateBalanceStatement.setInt(2, userId);
                updateBalanceStatement.executeUpdate();
            }

            Koneksi.closeConnection(connection);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deducting balance: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private double calculateTotalAmount() {
    try {
        Connection connection = Koneksi.getConnection();
        String username = UserSession.getLoggedInUsername();

        // Retrieve the user ID based on the logged-in username
        int userId = getUserIdByUsername(username);

        // Retrieve the total amount of the items in the current order
        String totalAmountQuery = "SELECT SUM(total) AS totalAmount FROM orders WHERE id_user = ?";
        try (PreparedStatement totalAmountStatement = connection.prepareStatement(totalAmountQuery)) {
            totalAmountStatement.setInt(1, userId);
            ResultSet resultSet = totalAmountStatement.executeQuery();

            if (resultSet.next()) {
                return resultSet.getDouble("totalAmount");
            } else {
                // Handle the case where there are no items in the order
                return 0.0;
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error calculating total amount: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return 0.0;
    }
}

    private int getUserIdByUsername(String username) {
        try {
            Connection connection = Koneksi.getConnection();
            String userIdQuery = "SELECT id_user FROM user WHERE username = ?";
            try (PreparedStatement userIdStatement = connection.prepareStatement(userIdQuery)) {
                userIdStatement.setString(1, username);
                try (ResultSet userIdResultSet = userIdStatement.executeQuery()) {
                    if (userIdResultSet.next()) {
                        return userIdResultSet.getInt("id_user");
                    } else {
                        // Handle the case where the user is not found
                        JOptionPane.showMessageDialog(null, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
                        return -1; // Or throw an exception or handle as appropriate
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error retrieving user ID: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return -1; // Or throw an exception or handle as appropriate
        }
    }

    private Object[] getProductDetails(String productName) {
        Object[] productDetails = new Object[2]; // Assuming deskripsi and gambar are retrieved

        try {
            Connection connection = Koneksi.getConnection();
            String query = "SELECT deskripsi, gambar FROM produk WHERE nama_produk = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setString(1, productName);

                ResultSet resultSet = statement.executeQuery();

                if (resultSet.next()) {
                    String deskripsi = resultSet.getString("deskripsi");
                    byte[] gambar = resultSet.getBytes("gambar");

                    productDetails[0] = deskripsi;
                    productDetails[1] = gambar;
                }
            }
            Koneksi.closeConnection(connection);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error retrieving product details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        return productDetails;
    }

    private void showLibrary() {
        DefaultTableModel libraryTableModel = (DefaultTableModel) libraryTable.getModel();
        libraryTableModel.setRowCount(0); // Clear existing data in the library table

        try {
            Connection connection = Koneksi.getConnection();
            String username = UserSession.getLoggedInUsername();

            // Retrieve the user ID based on the logged-in username
            String userIdQuery = "SELECT id_user FROM user WHERE username = ?";
            try (PreparedStatement userIdStatement = connection.prepareStatement(userIdQuery)) {
                userIdStatement.setString(1, username);
                ResultSet userIdResultSet = userIdStatement.executeQuery();

                if (userIdResultSet.next()) {
                    int userId = userIdResultSet.getInt("id_user");

                    // Retrieve library items for the user
                    String libraryQuery = "SELECT * FROM librarys WHERE id_user = ?";
                    try (PreparedStatement statement = connection.prepareStatement(libraryQuery)) {
                        statement.setInt(1, userId);
                        ResultSet resultSet = statement.executeQuery();

                        while (resultSet.next()) {
                            // Modify these lines based on your actual column names in the library table
                            byte[] imageData = resultSet.getBytes("gambar");
                            ImageIcon gambarProduk = new ImageIcon(imageData);
                            String namaProduk = resultSet.getString("nama_produk");
                            String deskripsi = resultSet.getString("deskripsi");

                            Object[] rowData = {
                                gambarProduk,
                                namaProduk,
                                deskripsi
                            };
                            libraryTableModel.addRow(rowData);
                        }

                        // Refresh the library table to reflect the changes
                        libraryTable.repaint();
                        libraryTable.revalidate();
                        libraryTable.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
                        libraryTable.getColumnModel().getColumn(2).setCellRenderer(new TextRenderer());
                    }
                } else {
                    // Handle the case where the user is not found
                    JOptionPane.showMessageDialog(null, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            Koneksi.closeConnection(connection);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving library data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void totalHarga() {
        DefaultTableModel orderTableModel = (DefaultTableModel) orderTable.getModel();
        int rowCount = orderTableModel.getRowCount();

        double total = 0;

        try {
            Connection connection = Koneksi.getConnection();

            // Mendapatkan username dari sesi pengguna yang login
            String username = UserSession.getLoggedInUsername();

            String query = "SELECT nama_produk, total FROM orders WHERE id_user = (SELECT id_user FROM user WHERE username = ?)";

            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setString(1, username);
                ResultSet resultSet = statement.executeQuery();

                while (resultSet.next()) {
                    String namaProduk = resultSet.getString("nama_produk");
                    double harga = resultSet.getDouble("total");
                    total += harga;
                }
            }

            String saldoQuery = "SELECT saldo FROM user WHERE id_user = (SELECT id_user FROM user WHERE username = ?)";
            try (PreparedStatement saldoStatement = connection.prepareStatement(saldoQuery)) {
                saldoStatement.setString(1, username);

                ResultSet saldoResultSet = saldoStatement.executeQuery();

                if (saldoResultSet.next()) {
                    double saldo = saldoResultSet.getDouble("saldo");
                    double balance = saldo - total;

                    tfTotal.setText("Rp. " + NumberFormat.getInstance().format(total));
                    tfBalance.setText("Rp. " + NumberFormat.getInstance().format(saldo));
                    tfChange.setText("Rp. " + NumberFormat.getInstance().format(balance));
                } else {
                    JOptionPane.showMessageDialog(this, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            Koneksi.closeConnection(connection);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving product names and balance: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void moveToOrder() {
        try {
            Connection connection = Koneksi.getConnection();
            String insertOrderQuery = "INSERT INTO orders (id_cart, id_user, total, waktu_pemesanan, nama_produk) VALUES (?, ?, ?, ?, ?)";
            String deleteFromCartQuery = "DELETE FROM cart WHERE id_cart = ?";

            int selectedRowIndex = cartTable.getSelectedRow();

            if (selectedRowIndex != -1) {
                int idProduk = (int) cartTable.getValueAt(selectedRowIndex, 1);
                double totalPembayaran = (double) cartTable.getValueAt(selectedRowIndex, 4);
                Timestamp waktuPemesanan = Timestamp.valueOf(LocalDateTime.now());

                // Get the logged-in username
                String username = UserSession.getLoggedInUsername();

                try (PreparedStatement userIdStatement = connection.prepareStatement("SELECT id_user FROM user WHERE username = ?");
                        PreparedStatement insertStatement = connection.prepareStatement(insertOrderQuery, Statement.RETURN_GENERATED_KEYS)) {

                    userIdStatement.setString(1, username);

                    try (ResultSet userIdResultSet = userIdStatement.executeQuery()) {
                        if (userIdResultSet.next()) {
                            // Assuming 'id_cart' and 'nama_produk' are present in the cartTable
                            int idCart = (int) cartTable.getValueAt(selectedRowIndex, 0);
                            String namaProduk = (String) cartTable.getValueAt(selectedRowIndex, 3);

                            insertStatement.setInt(1, idCart);
                            insertStatement.setInt(2, userIdResultSet.getInt("id_user"));  // Set the user ID
                            insertStatement.setDouble(3, totalPembayaran);
                            insertStatement.setTimestamp(4, waktuPemesanan);
                            insertStatement.setString(5, namaProduk);

                            int affectedRows = insertStatement.executeUpdate();

                            if (affectedRows > 0) {
                                // Now, delete the item from the cart
                                try (PreparedStatement deleteStatement = connection.prepareStatement(deleteFromCartQuery)) {
                                    deleteStatement.setInt(1, idCart);
                                    deleteStatement.executeUpdate();
                                }

                                JOptionPane.showMessageDialog(this, "Item moved to order successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

                                showCart();
                                showOrder();
                            }
                        } else {
                            // Handle the case where the user is not found
                            JOptionPane.showMessageDialog(null, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select an item from the cart.", "No Selection", JOptionPane.WARNING_MESSAGE);
            }

            Koneksi.closeConnection(connection);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error moving item to order: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void showOrder() {
        DefaultTableModel orderTableModel = (DefaultTableModel) orderTable.getModel();
        orderTableModel.setRowCount(0); // Clear existing data in the order table

        try {
            Connection connection = Koneksi.getConnection();
            String username = UserSession.getLoggedInUsername();

            // Retrieve the user ID based on the logged-in username
            String userIdQuery = "SELECT id_user FROM user WHERE username = ?";
            try (PreparedStatement userIdStatement = connection.prepareStatement(userIdQuery)) {
                userIdStatement.setString(1, username);
                ResultSet userIdResultSet = userIdStatement.executeQuery();

                if (userIdResultSet.next()) {
                    int userId = userIdResultSet.getInt("id_user");

                    // Retrieve order items for the user
                    String orderQuery = "SELECT * FROM orders WHERE id_user = ?";
                    try (PreparedStatement statement = connection.prepareStatement(orderQuery)) {
                        statement.setInt(1, userId);
                        ResultSet resultSet = statement.executeQuery();

                        while (resultSet.next()) {
                            int idOrder = resultSet.getInt("ID_Order");
                            String namaProduk = resultSet.getString("nama_produk");
                            double totalPembayaran = resultSet.getDouble("total");
                            Timestamp waktuPemesanan = resultSet.getTimestamp("Waktu_Pemesanan");

                            Object[] rowData = {
                                namaProduk,
                                totalPembayaran,
                                idOrder,
                                waktuPemesanan
                            };
                            orderTableModel.addRow(rowData);
                        }

                        // Refresh the order table to reflect the changes
                        orderTable.repaint();
                        orderTable.revalidate();
                        totalHarga();
                    }
                } else {
                    // Handle the case where the user is not found
                    JOptionPane.showMessageDialog(null, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            Koneksi.closeConnection(connection);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving order data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void showCart() {
        DefaultTableModel table = (DefaultTableModel) cartTable.getModel();
        table.setRowCount(0); // Clear existing data in the cart table

        try {
            Connection connection = Koneksi.getConnection();
            String username = UserSession.getLoggedInUsername();

            // Retrieve the user ID based on the logged-in username
            String userIdQuery = "SELECT id_user FROM user WHERE username = ?";
            try (PreparedStatement userIdStatement = connection.prepareStatement(userIdQuery)) {
                userIdStatement.setString(1, username);
                ResultSet userIdResultSet = userIdStatement.executeQuery();

                if (userIdResultSet.next()) {
                    int userId = userIdResultSet.getInt("id_user");

                    // Retrieve cart items for the user
                    String cartQuery = "SELECT * FROM cart WHERE id_user = ?";
                    try (PreparedStatement statement = connection.prepareStatement(cartQuery)) {
                        statement.setInt(1, userId);
                        ResultSet resultSet = statement.executeQuery();

                        int preferredWidth = 50;
                        cartTable.getColumnModel().getColumn(0).setPreferredWidth(preferredWidth);
                        cartTable.getColumnModel().getColumn(1).setPreferredWidth(preferredWidth);

                        int imagePreferredWidth = 100;
                        cartTable.getColumnModel().getColumn(2).setPreferredWidth(imagePreferredWidth);

                        while (resultSet.next()) {
                            int idCart = resultSet.getInt("id_cart");
                            int idProduk = resultSet.getInt("id_produk");
                            byte[] imageData = resultSet.getBytes("gambar");
                            ImageIcon gambarProduk = new ImageIcon(imageData);
                            String namaProduk = resultSet.getString("nama_produk");
                            double harga = resultSet.getDouble("harga");

                            Object[] rowData = {
                                idCart,
                                idProduk,
                                gambarProduk,
                                namaProduk,
                                harga
                            };
                            table.addRow(rowData);
                        }

                        // Refresh the cart table to reflect the changes
                        cartTable.repaint();
                        cartTable.revalidate();

                        cartTable.getColumnModel().getColumn(2).setCellRenderer(new ImageRenderer());
                        Koneksi.closeConnection(connection);
                    }
                } else {
                    // Handle the case where the user is not found
                    JOptionPane.showMessageDialog(null, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error retrieving cart data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addToCart(String genre, javax.swing.JTable table) {
        int selectedRowIndex = table.getSelectedRow();

        if (selectedRowIndex != -1) {
            Connection connection = null;

            try {
                connection = Koneksi.getConnection();
                String username = UserSession.getLoggedInUsername();

                String userIdQuery = "SELECT id_user FROM user WHERE username = ?";
                int userId;

                try (PreparedStatement userIdStatement = connection.prepareStatement(userIdQuery)) {
                    userIdStatement.setString(1, username);

                    try (ResultSet userIdResultSet = userIdStatement.executeQuery()) {
                        if (userIdResultSet.next()) {
                            userId = userIdResultSet.getInt("id_user");
                        } else {
                            // Handle the case where the user is not found
                            JOptionPane.showMessageDialog(null, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                }

                int idProduk = (int) table.getValueAt(selectedRowIndex, 0);
                String checkQuery = "SELECT * FROM cart WHERE id_produk = ? AND id_user = ?";

                try (PreparedStatement checkStatement = connection.prepareStatement(checkQuery)) {
                    checkStatement.setInt(1, idProduk);
                    checkStatement.setInt(2, userId);

                    try (ResultSet resultSet = checkStatement.executeQuery()) {
                        if (resultSet.next()) {
                            JOptionPane.showMessageDialog(this, "Item is already in the cart.", "Duplicate Item", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                    }
                }

                String insertQuery = "INSERT INTO cart (id_produk, id_user, gambar, nama_produk, harga) VALUES (?, ?, ?, ?, ?)";

                try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
                    String namaProduk = (String) table.getValueAt(selectedRowIndex, 2);
                    double harga = (double) table.getValueAt(selectedRowIndex, 4);
                    byte[] imageData = getImageData(table, selectedRowIndex);

                    insertStatement.setInt(1, idProduk);
                    insertStatement.setInt(2, userId);
                    insertStatement.setBytes(3, imageData);
                    insertStatement.setString(4, namaProduk);
                    insertStatement.setDouble(5, harga);

                    insertStatement.executeUpdate();
                }

                JOptionPane.showMessageDialog(this, "Item added to cart successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
//                showCart();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error adding item to cart: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                // Close the connection in a finally block to ensure it's closed even if an exception occurs
                Koneksi.closeConnection(connection);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an item to add to the cart.", "No Selection", JOptionPane.WARNING_MESSAGE);
        }
    }

    private byte[] getImageData(javax.swing.JTable table, int rowIndex) {
        try {
            ImageIcon imageIcon = (ImageIcon) table.getValueAt(rowIndex, 1); // Assuming the second column is the image column
            BufferedImage bufferedImage = new BufferedImage(imageIcon.getIconWidth(), imageIcon.getIconHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics g = bufferedImage.createGraphics();
            imageIcon.paintIcon(null, g, 0, 0);
            g.dispose();

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(bufferedImage, "png", baos);
            return baos.toByteArray();
        } catch (IOException e) {
            e.printStackTrace(); // Handle the exception appropriately in your application
            return null;
        }
    }

    private void switchPanel(JPanel newPanel) {
        MainPanel.removeAll();
        MainPanel.repaint();
        MainPanel.revalidate();

        MainPanel.add(newPanel);
        MainPanel.repaint();
        MainPanel.revalidate();
    }

    private void gantiGenre(String genre, javax.swing.JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0); // Bersihkan data tabel

        try {
            Connection connection = Koneksi.getConnection();
            String query = "SELECT * FROM produk WHERE genre LIKE ?";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setString(1, "%" + genre + "%");

            ResultSet resultSet = statement.executeQuery();

            int preferredWidth = 50;
            table.getColumnModel().getColumn(0).setPreferredWidth(preferredWidth);

            int imagePreferredWidth = 115;
            table.getColumnModel().getColumn(1).setPreferredWidth(imagePreferredWidth);

            while (resultSet.next()) {
                byte[] imageData = resultSet.getBytes("gambar");
                ImageIcon gambarProduk = new ImageIcon(imageData);
                String genres = resultSet.getString("genre");
                if (genres != null && genres.contains(genre)) {
                    Object[] rowData = {
                        resultSet.getInt("id_produk"),
                        gambarProduk,
                        resultSet.getString("nama_produk"),
                        genres,
                        resultSet.getDouble("harga"),
                        resultSet.getString("deskripsi"),
                        resultSet.getString("platform"),
                        resultSet.getString("developer")
                    };
                    model.addRow(rowData);
                }
            }
            table.getColumnModel().getColumn(1).setCellRenderer(new ImageRenderer());
            table.getColumnModel().getColumn(6).setCellRenderer(new TextRenderer());
            //table.setDefaultRenderer(Object.class, new ImageAndTextRenderer());

            Koneksi.closeConnection(connection);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error saat menutup koneksi: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        }
    }

    class ImageRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value instanceof ImageIcon) {
                ImageIcon originalIcon = (ImageIcon) value;

                int rowHeight = table.getRowHeight(row);

                double scaleFactor = (double) rowHeight / originalIcon.getIconHeight();

                int scaledWidth = (int) (originalIcon.getIconWidth() * scaleFactor);
                int scaledHeight = rowHeight;

                Image originalImage = originalIcon.getImage();
                Image resizedImage = originalImage.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);
                ImageIcon resizedIcon = new ImageIcon(resizedImage);

                setIcon(resizedIcon);
                setText("");
                setToolTipText(getText());
            } else {
                setIcon(null);
                setText("");
            }
            return this;
        }
    }

    class TextRenderer extends JTextArea implements TableCellRenderer {

        public TextRenderer() {
            setLineWrap(true);
            setWrapStyleWord(true);
            setOpaque(true);
            setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

            // Mengatur teks pada JTextArea
            setText((value == null) ? "" : value.toString());

            // Menyesuaikan ukuran JTextArea sesuai dengan sel
            setSize(table.getColumnModel().getColumn(column).getWidth(),
                    getPreferredSize().height);

            if (isSelected) {
                // Mengatur warna latar belakang jika sel dipilih
                setBackground(table.getSelectionBackground());
            } else {
                // Mengatur warna latar belakang sesuai dengan urutan baris
                setBackground((row % 2 == 0) ? table.getBackground() : table.getBackground());
            }
            return this;
        }
    }

    private void UpdateUser(String newUsername, String newPassword) {
        try {
            Connection connection = Koneksi.getConnection();
            String username = UserSession.getLoggedInUsername();

            // Update user information in the database
            String updateQuery = "UPDATE user SET username = ?, password = ? WHERE username = ?";
            try (PreparedStatement updateStatement = connection.prepareStatement(updateQuery)) {
                updateStatement.setString(1, newUsername);
                updateStatement.setString(2, newPassword);
                updateStatement.setString(3, username);

                int affectedRows = updateStatement.executeUpdate();

                if (affectedRows > 0) {
                    JOptionPane.showMessageDialog(this, "User information updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    // Update the user session with the new username
                    UserSession.setLoggedInUsername(newUsername);
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update user information.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            Koneksi.closeConnection(connection);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating user information: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void showBalance() {
        try {
            Connection connection = Koneksi.getConnection();
            String username = UserSession.getLoggedInUsername();

            // Retrieve the user's balance based on the logged-in username
            String balanceQuery = "SELECT saldo FROM user WHERE username = ?";
            try (PreparedStatement statement = connection.prepareStatement(balanceQuery)) {
                statement.setString(1, username);
                ResultSet resultSet = statement.executeQuery();

                if (resultSet.next()) {
                    double saldo = resultSet.getDouble("saldo");

                    // Set the saldo in the respective text field
                    tfSaldo.setText("Rp. " + NumberFormat.getInstance().format(saldo));
                } else {
                    // Handle the case where the user is not found
                    JOptionPane.showMessageDialog(this, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            Koneksi.closeConnection(connection);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving user balance: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BodyPanel;
    private javax.swing.JPanel Cart;
    private javax.swing.JPanel Genre;
    private javax.swing.JPanel Library;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JPanel MenuPanel;
    private javax.swing.JPanel Order;
    private javax.swing.JPanel Settings;
    private javax.swing.JPanel StrategyPanel;
    private javax.swing.JLabel actBtn;
    private javax.swing.JLabel actionLabel;
    private javax.swing.JPanel actionPanel;
    private javax.swing.JTable actionTable;
    private javax.swing.JLabel advBtn;
    private javax.swing.JLabel advLabel;
    private javax.swing.JPanel adventurePanel;
    private javax.swing.JTable adventureTable;
    private javax.swing.JLabel bgAction;
    private javax.swing.JLabel bgAdventure;
    private javax.swing.JLabel bgCart;
    private javax.swing.JLabel bgGenre;
    private javax.swing.JLabel bgHorror;
    private javax.swing.JLabel bgMenu;
    private javax.swing.JLabel bgOrder;
    private javax.swing.JLabel bgOrder1;
    private javax.swing.JLabel bgRacing;
    private javax.swing.JLabel bgSettings;
    private javax.swing.JLabel bgShooting;
    private javax.swing.JLabel bgSimulation;
    private javax.swing.JLabel bgSport;
    private javax.swing.JLabel bgStrategy;
    private javax.swing.JLabel cancelBtn;
    private javax.swing.JLabel cartBtn;
    private javax.swing.JTable cartTable;
    private javax.swing.JLabel changeLabel;
    private javax.swing.JLabel continueBtn;
    private javax.swing.JLabel genrePanel;
    private javax.swing.JLabel genreTitle;
    private javax.swing.JLabel horrorBtn;
    private javax.swing.JLabel horrorLabel;
    private javax.swing.JPanel horrorPanel;
    private javax.swing.JTable horrorTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel labelCart;
    private javax.swing.JLabel labelGenre;
    private javax.swing.JLabel labelLibrary;
    private javax.swing.JLabel labelLogout;
    private javax.swing.JLabel labelSettings;
    private javax.swing.JLabel lbPassword;
    private javax.swing.JLabel lbSaldo;
    private javax.swing.JLabel lbUsername;
    private javax.swing.JTable libraryTable;
    private javax.swing.JLabel logo;
    private javax.swing.JTable orderTable;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JLabel purchaseBtn;
    private javax.swing.JLabel racingBtn;
    private javax.swing.JLabel racingLabel;
    private javax.swing.JPanel racingPanel;
    private javax.swing.JTable racingTable;
    private javax.swing.JLabel saldoLabel;
    private javax.swing.JLabel settingsBtn;
    private javax.swing.JTable shootingTable;
    private javax.swing.JLabel shotBtn;
    private javax.swing.JLabel shotLabel;
    private javax.swing.JPanel shotPanel;
    private javax.swing.JLabel simuBtn;
    private javax.swing.JLabel simuLabel;
    private javax.swing.JPanel simuPanel;
    private javax.swing.JTable simulationTable;
    private javax.swing.JLabel sportBtn;
    private javax.swing.JLabel sportLabel;
    private javax.swing.JPanel sportPanel;
    private javax.swing.JTable sportTable;
    private javax.swing.JLabel startBtn;
    private javax.swing.JLabel stratLabel;
    private javax.swing.JTable strategyTable;
    private javax.swing.JTextField tfBalance;
    private javax.swing.JTextField tfChange;
    private javax.swing.JTextField tfSaldo;
    private javax.swing.JTextField tfTotal;
    private javax.swing.JTextField tfUsername;
    private javax.swing.JLabel totalLabel1;
    // End of variables declaration//GEN-END:variables
}
